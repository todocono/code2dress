/* Generated By:JavaCC: Do not edit this line. SoyFileParserTokenManager.java */
package com.google.template.soy.soyparse;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.google.template.soy.base.IdGenerator;
import com.google.template.soy.base.IncrementingIdGenerator;
import com.google.template.soy.base.SourceLocation;
import com.google.template.soy.base.SoyFileKind;
import com.google.template.soy.base.SoySyntaxException;
import com.google.template.soy.soytree.SoyFileNode;
import com.google.template.soy.soytree.SoyNode.StandaloneNode;
import com.google.template.soy.soytree.TemplateBasicNode;
import com.google.template.soy.soytree.TemplateDelegateNode;
import com.google.template.soy.soytree.TemplateNode;
import com.google.template.soy.soytree.TemplateNode.SoyFileHeaderInfo;
import java.io.*;
import java.util.*;
import java.util.regex.*;

/** Token Manager. */
public class SoyFileParserTokenManager implements SoyFileParserConstants
{
  /** Whether we have encountered a delpackage declaration. */
  private boolean seenDelpackage = false;

  /** Whether we have encountered a namespace declaration. */
  private boolean seenNamespace = false;

  /** Whether we have encountered a alias declaration. */
  private boolean seenAlias = false;

  /** Whether we have already encountered a template. */
  private boolean seenTemplate = false;

  /** When inside a template, this field holds the command name ('template' or 'deltemplate'). */
  private String currTemplateCmdName = null;


  /**
   * Creates a new TokenMgrError with the given message and throws it.
   * @param message The error message.
   * @throws TokenMgrError Always.
   */
  private static void throwTokenMgrError(String message) throws TokenMgrError {
    throw new TokenMgrError(message, TokenMgrError.LEXICAL_ERROR);
  }


  /**
   * Creates a new TokenMgrError with the given message and line/column numbers and throws it.
   * @param message The error message. Should not end with a period because the suffix
   *     " [line ..., column ...]" will be appended.
   * @param matchedToken The current matched token to get the line/column numbers from.
   * @throws TokenMgrError Always.
   */
  private static void throwTokenMgrError(String message, Token matchedToken) throws TokenMgrError {
    throw new TokenMgrError(message + " [line " + matchedToken.beginLine +
                            ", column " + matchedToken.beginColumn + "].",
                            TokenMgrError.LEXICAL_ERROR);
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2110L) != 0L)
         {
            jjmatchedKind = 31;
            return 34;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 31;
            return 289;
         }
         return -1;
      case 1:
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 110;
         }
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 72;
         }
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 33;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 71;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 109;
         }
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 32;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 108;
         }
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 70;
         }
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 31;
         }
         return -1;
      case 4:
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 30;
         }
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 69;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 87;
         }
         return -1;
      case 5:
         if ((active0 & 0x2000L) != 0L)
            return 290;
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 68;
         }
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 29;
         }
         return -1;
      case 6:
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 67;
         }
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 28;
         }
         return -1;
      case 7:
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 66;
         }
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 27;
         }
         return -1;
      case 8:
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 49;
         }
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 26;
         }
         return -1;
      case 9:
         if ((active0 & 0x100L) != 0L)
            return 291;
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return 5;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x2110L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(2, 14);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 290);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 291);
         break;
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 4, 292);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 289;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 290:
                  jjCheckNAddTwoStates(144, 145);
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 114;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 289:
               case 201:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 34:
                  if (curChar == 47)
                     jjAddStates(6, 7);
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 292:
                  jjCheckNAddTwoStates(36, 37);
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 0:
                  if (kind > 31)
                     kind = 31;
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(11, 15);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 291:
                  jjCheckNAddTwoStates(75, 76);
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 1:
                  if (curChar == 10 && kind > 30)
                     kind = 30;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 31)
                     kind = 31;
                  break;
               case 6:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 7:
                  if (curChar == 10)
                     jjCheckNAddStates(8, 10);
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 23);
                  break;
               case 11:
                  if (curChar == 46)
                     jjCheckNAddStates(24, 26);
                  break;
               case 12:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 13:
                  if (curChar == 10)
                     jjCheckNAddStates(24, 26);
                  break;
               case 14:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 31);
                  break;
               case 18:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(32, 37);
                  break;
               case 19:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 20:
                  if (curChar == 10)
                     jjCheckNAddStates(38, 40);
                  break;
               case 21:
                  if (curChar == 13)
                     jjCheckNAdd(20);
                  break;
               case 22:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 23:
                  if (curChar == 10)
                     jjCheckNAddStates(41, 43);
                  break;
               case 24:
                  if (curChar == 13)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if (curChar == 13)
                     jjCheckNAddTwoStates(20, 23);
                  break;
               case 36:
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 39:
                  if ((0xfffffffeffffd9ffL & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 50:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 51:
                  if (curChar == 10)
                     jjCheckNAddStates(16, 18);
                  break;
               case 52:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 51);
                  break;
               case 55:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 56:
                  if (curChar == 10)
                     jjCheckNAddStates(52, 54);
                  break;
               case 57:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 46)
                     jjCheckNAddStates(55, 57);
                  break;
               case 59:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 60:
                  if (curChar == 10)
                     jjCheckNAddStates(55, 57);
                  break;
               case 61:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(58, 63);
                  break;
               case 64:
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 75:
                  jjCheckNAddTwoStates(75, 76);
                  break;
               case 77:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 78:
                  if ((0xfffffffeffffd9ffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 88:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 89:
                  if (curChar == 10)
                     jjCheckNAddStates(3, 5);
                  break;
               case 90:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(66, 70);
                  break;
               case 93:
                  if (curChar == 46)
                     jjCheckNAddStates(71, 73);
                  break;
               case 94:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 95:
                  if (curChar == 10)
                     jjCheckNAddStates(71, 73);
                  break;
               case 96:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(74, 78);
                  break;
               case 100:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(79, 84);
                  break;
               case 101:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 102:
                  if (curChar == 10)
                     jjCheckNAddStates(85, 87);
                  break;
               case 103:
                  if (curChar == 13)
                     jjCheckNAdd(102);
                  break;
               case 104:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(88, 90);
                  break;
               case 105:
                  if (curChar == 10)
                     jjCheckNAddStates(88, 90);
                  break;
               case 106:
                  if (curChar == 13)
                     jjCheckNAdd(105);
                  break;
               case 107:
                  if (curChar == 13)
                     jjCheckNAddTwoStates(102, 105);
                  break;
               case 113:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 114:
                  if (curChar == 10)
                     jjCheckNAddStates(0, 2);
                  break;
               case 115:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(91, 94);
                  break;
               case 118:
                  if (curChar == 46)
                     jjCheckNAddStates(95, 97);
                  break;
               case 119:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(95, 97);
                  break;
               case 120:
                  if (curChar == 10)
                     jjCheckNAddStates(95, 97);
                  break;
               case 121:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(98, 101);
                  break;
               case 124:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(102, 107);
                  break;
               case 125:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 126:
                  if (curChar == 10)
                     jjCheckNAddStates(108, 110);
                  break;
               case 127:
                  if (curChar == 13)
                     jjCheckNAdd(126);
                  break;
               case 128:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(111, 113);
                  break;
               case 129:
                  if (curChar == 10)
                     jjCheckNAddStates(111, 113);
                  break;
               case 130:
                  if (curChar == 13)
                     jjCheckNAdd(129);
                  break;
               case 132:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(114, 117);
                  break;
               case 133:
                  if (curChar == 10)
                     jjCheckNAddStates(114, 117);
                  break;
               case 134:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  jjCheckNAddTwoStates(135, 136);
                  break;
               case 138:
                  if (curChar == 13)
                     jjCheckNAddTwoStates(126, 129);
                  break;
               case 144:
                  jjCheckNAddTwoStates(144, 145);
                  break;
               case 146:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(118, 119);
                  break;
               case 147:
                  if ((0xfffffffeffffd9ffL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 152:
                  if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               case 171:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(11, 15);
                  break;
               case 199:
                  if (curChar == 42 && kind > 18)
                     kind = 18;
                  break;
               case 200:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 223:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAdd(224);
                  break;
               case 224:
                  jjCheckNAddTwoStates(224, 225);
                  break;
               case 226:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(120, 122);
                  break;
               case 227:
                  if ((0x2400L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 228:
                  if (curChar == 10 && kind > 20)
                     kind = 20;
                  break;
               case 229:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if (curChar == 10)
                     jjCheckNAdd(224);
                  break;
               case 231:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 250:
                  jjAddStates(123, 124);
                  break;
               case 252:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(125, 126);
                  break;
               case 253:
                  if ((0xfffffffeffffd9ffL & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 290:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(144, 145);
                  else if (curChar == 125)
                     jjAddStates(118, 119);
                  break;
               case 70:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 67:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 110:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 149;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 140;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 289:
                  if (curChar == 123)
                     jjAddStates(127, 128);
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 197;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 191;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 5:
                  if (curChar == 101)
                     jjCheckNAddTwoStates(36, 37);
                  if (curChar == 101)
                     jjAddStates(129, 130);
                  break;
               case 32:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 285;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 267;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 245;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 68:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 31:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 284;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 266;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 30;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 34:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 287;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 277;
                  else if (curChar == 123)
                     jjAddStates(127, 128);
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 150;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 269;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 259;
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 197;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 141;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 72;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 247;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 237;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 110;
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 191;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 181;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 109:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 148;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 139;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 69:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 26:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 27:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 40;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 66:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 74;
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 71:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 83;
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 49:
                  if (curChar == 101)
                     jjCheckNAddTwoStates(75, 76);
                  if (curChar == 101)
                     jjAddStates(131, 132);
                  break;
               case 33:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 286;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 268;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 246;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 46;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 108:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 143;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 28:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 72:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 87:
                  if (curChar == 115)
                     jjCheckNAddTwoStates(144, 145);
                  if (curChar == 115)
                     jjAddStates(133, 134);
                  if (curChar == 115)
                     jjAddStates(135, 136);
                  break;
               case 29:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 292:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  else if (curChar == 125)
                     jjAddStates(44, 45);
                  break;
               case 0:
                  jjAddStates(11, 15);
                  if (kind > 31)
                     kind = 31;
                  if (curChar == 123)
                     jjAddStates(137, 142);
                  if (curChar == 123)
                     jjAddStates(143, 150);
                  break;
               case 291:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  else if (curChar == 125)
                     jjAddStates(64, 65);
                  break;
               case 30:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 43;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 3:
                  if (kind > 31)
                     kind = 31;
                  break;
               case 4:
                  if (curChar == 123)
                     jjAddStates(143, 150);
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(19, 23);
                  break;
               case 15:
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(27, 31);
                  break;
               case 17:
                  if (curChar == 125 && kind > 1)
                     kind = 1;
                  break;
               case 35:
                  if (curChar == 101)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 125)
                     jjAddStates(44, 45);
                  break;
               case 39:
                  if (kind > 3)
                     kind = 3;
                  break;
               case 40:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 41:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 53:
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(46, 51);
                  break;
               case 62:
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(58, 63);
                  break;
               case 64:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 125 && kind > 5)
                     kind = 5;
                  break;
               case 73:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 101)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 75:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 76:
                  if (curChar == 125)
                     jjAddStates(64, 65);
                  break;
               case 78:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 79:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 80:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 91:
               case 92:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(66, 70);
                  break;
               case 97:
               case 98:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(74, 78);
                  break;
               case 99:
                  if (curChar == 125 && kind > 9)
                     kind = 9;
                  break;
               case 111:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 115)
                     jjAddStates(133, 134);
                  break;
               case 116:
               case 117:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(91, 94);
                  break;
               case 122:
               case 123:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(98, 101);
                  break;
               case 131:
                  if (curChar == 115)
                     jjAddStates(151, 152);
                  break;
               case 135:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjAddStates(153, 154);
                  break;
               case 136:
                  if (curChar == 125 && kind > 10)
                     kind = 10;
                  break;
               case 137:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 139:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 140:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 115)
                     jjCheckNAddTwoStates(144, 145);
                  break;
               case 144:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(144, 145);
                  break;
               case 145:
                  if (curChar == 125)
                     jjAddStates(118, 119);
                  break;
               case 147:
                  if (kind > 12)
                     kind = 12;
                  break;
               case 148:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 149:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 153:
                  if (curChar == 101 && kind > 28)
                     kind = 28;
                  break;
               case 154:
               case 161:
                  if (curChar == 116)
                     jjCheckNAdd(153);
                  break;
               case 155:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 162:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  jjAddStates(11, 15);
                  break;
               case 172:
                  if (curChar == 101 && kind > 2)
                     kind = 2;
                  break;
               case 173:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 101 && kind > 6)
                     kind = 6;
                  break;
               case 184:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 115 && kind > 11)
                     kind = 11;
                  break;
               case 194:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 202:
                  if (curChar == 123)
                     jjAddStates(127, 128);
                  break;
               case 203:
                  if (curChar == 101 && kind > 23)
                     kind = 23;
                  break;
               case 204:
               case 211:
                  if (curChar == 116)
                     jjCheckNAdd(203);
                  break;
               case 205:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 212:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 123)
                     jjAddStates(137, 142);
                  break;
               case 222:
                  if (curChar == 101)
                     jjAddStates(155, 156);
                  break;
               case 224:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjAddStates(157, 158);
                  break;
               case 225:
                  if (curChar == 125)
                     jjAddStates(120, 122);
                  break;
               case 232:
               case 239:
                  if (curChar == 116)
                     jjCheckNAdd(222);
                  break;
               case 233:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 235:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 240:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 247:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 248:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 101)
                     jjCheckNAdd(250);
                  break;
               case 250:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(250, 251);
                  break;
               case 251:
                  if (curChar == 125)
                     jjAddStates(125, 126);
                  break;
               case 253:
                  if (kind > 24)
                     kind = 24;
                  break;
               case 254:
               case 261:
                  if (curChar == 116)
                     jjCheckNAdd(249);
                  break;
               case 255:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 260:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 262:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if (curChar == 101 && kind > 27)
                     kind = 27;
                  break;
               case 272:
               case 279:
                  if (curChar == 116)
                     jjCheckNAdd(271);
                  break;
               case 273:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 276:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 278:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 280:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 285:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 286:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 287:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 288:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 290:
               case 144:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(144, 145);
                  break;
               case 292:
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 15);
                  break;
               case 291:
               case 75:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 31)
                     kind = 31;
                  break;
               case 39:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 3)
                     kind = 3;
                  break;
               case 64:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(159, 160);
                  break;
               case 78:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 135:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(153, 154);
                  break;
               case 147:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               case 171:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 15);
                  break;
               case 224:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(157, 158);
                  break;
               case 250:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(123, 124);
                  break;
               case 253:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 24)
                     kind = 24;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 289 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2110L) != 0L)
         {
            jjmatchedKind = 21;
            return 43;
         }
         return -1;
      case 1:
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return 40;
         }
         if ((active0 & 0x2100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return 39;
         }
         if ((active0 & 0x2100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x2100L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return 38;
         }
         return -1;
      case 4:
         if ((active0 & 0x2110L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x2110L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x110L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x110L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x110L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x110L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 123:
         return jjMoveStringLiteralDfa1_1(0x2110L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x10L);
      case 109:
         return jjMoveStringLiteralDfa4_1(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa5_1(active0, 0x100L);
      case 112:
         return jjMoveStringLiteralDfa5_1(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x10L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         return jjMoveStringLiteralDfa6_1(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa7_1(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0x100L);
      case 107:
         return jjMoveStringLiteralDfa8_1(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_1(active0, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa9_1(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(9, 8);
         break;
      case 103:
         return jjMoveStringLiteralDfa10_1(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(10, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 104;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 21)
                     kind = 21;
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 43:
                  if (curChar == 47)
                     jjAddStates(161, 162);
                  if (curChar == 47)
                     jjAddStates(163, 164);
                  if (curChar == 47)
                     jjAddStates(165, 166);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 2:
                  if (curChar == 47)
                     jjAddStates(167, 168);
                  break;
               case 63:
                  if (curChar == 47)
                     jjAddStates(163, 164);
                  break;
               case 66:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(169, 170);
                  break;
               case 67:
                  if ((0xfffffffeffffd9ffL & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 85:
                  if (curChar == 47)
                     jjAddStates(161, 162);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  jjstateSet[jjnewStateCnt++] = 22;
                  if (kind > 21)
                     kind = 21;
                  if (curChar == 123)
                     jjAddStates(171, 173);
                  if (curChar == 123)
                     jjAddStates(174, 175);
                  break;
               case 43:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 3:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (curChar == 125 && kind > 25)
                     kind = 25;
                  break;
               case 5:
               case 12:
                  if (curChar == 116)
                     jjCheckNAdd(3);
                  break;
               case 6:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 23:
                  if (curChar == 123)
                     jjAddStates(174, 175);
                  break;
               case 24:
                  if (curChar == 101 && kind > 27)
                     kind = 27;
                  break;
               case 25:
               case 32:
                  if (curChar == 116)
                     jjCheckNAdd(24);
                  break;
               case 26:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 123)
                     jjAddStates(171, 173);
                  break;
               case 44:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if (curChar == 125 && kind > 22)
                     kind = 22;
                  break;
               case 46:
               case 53:
                  if (curChar == 116)
                     jjCheckNAdd(44);
                  break;
               case 47:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 54:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if (curChar == 125)
                     jjAddStates(169, 170);
                  break;
               case 67:
                  if (kind > 26)
                     kind = 26;
                  break;
               case 68:
               case 75:
                  if (curChar == 116)
                     jjCheckNAdd(64);
                  break;
               case 69:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 86:
                  if (curChar == 101 && kind > 28)
                     kind = 28;
                  break;
               case 87:
               case 94:
                  if (curChar == 116)
                     jjCheckNAdd(86);
                  break;
               case 88:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 95:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 67:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 26)
                     kind = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 104 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 16)
                     kind = 16;
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 42)
                     jjAddStates(176, 177);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 15)
                     kind = 15;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 4:
                  if (curChar == 42)
                     jjAddStates(176, 177);
                  break;
               case 5:
                  if (curChar == 47)
                     jjCheckNAddStates(178, 180);
                  break;
               case 6:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(178, 180);
                  break;
               case 7:
                  if ((0x2400L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 8:
                  if (curChar == 10 && kind > 17)
                     kind = 17;
                  break;
               case 9:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if ((0xfffffffeffffd9ffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 12:
                  if (kind > 19)
                     kind = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   113, 115, 116, 88, 90, 91, 160, 170, 6, 8, 9, 182, 192, 198, 201, 202, 
   50, 52, 53, 10, 11, 17, 18, 25, 12, 14, 15, 11, 16, 17, 18, 25, 
   19, 21, 11, 22, 24, 17, 19, 21, 11, 22, 24, 17, 38, 39, 54, 55, 
   57, 58, 64, 65, 55, 57, 58, 59, 61, 62, 55, 57, 58, 63, 64, 65, 
   77, 78, 92, 93, 99, 100, 107, 94, 96, 97, 93, 98, 99, 100, 107, 101, 
   103, 93, 104, 106, 99, 101, 103, 93, 104, 106, 99, 117, 118, 124, 138, 119, 
   121, 122, 118, 123, 124, 138, 125, 127, 118, 128, 130, 137, 125, 127, 118, 128, 
   130, 137, 132, 134, 135, 136, 146, 147, 226, 227, 229, 250, 251, 252, 253, 210, 
   220, 6, 8, 50, 52, 113, 115, 88, 90, 238, 248, 260, 270, 278, 288, 34, 
   48, 73, 86, 111, 142, 151, 152, 132, 134, 135, 136, 223, 231, 224, 225, 64, 
   65, 93, 103, 74, 84, 52, 62, 11, 21, 66, 67, 43, 63, 85, 31, 41, 
   5, 10, 6, 7, 9, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_TEMPLATE",
   "IN_SOY_DOC",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 0, -1, -1, 1, -1, 0, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1fdc3fffL, 
};
static final long[] jjtoSkip = {
   0xc003c000L, 
};
static final long[] jjtoSpecial = {
   0xc003c000L, 
};
static final long[] jjtoMore = {
   0x200000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[289];
private final int[] jjstateSet = new int[578];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public SoyFileParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SoyFileParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 289; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    if (seenDelpackage) {
      throwTokenMgrError("Found multiple 'delpackage' declarations.");
    }
    if (seenNamespace) {
      throwTokenMgrError(
          "The 'delpackage' declaration must appear before the 'namespace' declaration.");
    }
    if (seenAlias) {
      throwTokenMgrError(
          "The 'delpackage' declaration must appear before any 'alias' declarations.");
    }
    if (seenTemplate) {
      throwTokenMgrError("The 'delpackage' declaration must appear before any templates.");
    }
    seenDelpackage = true;
         break;
      case 2 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("Tag 'delpackage' not at start of line.");
         break;
      case 3 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("End of tag 'delpackage' not at end of line.");
         break;
      case 4 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("Invalid 'delpackage' tag", matchedToken);
         break;
      case 5 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    if (seenNamespace) {
      throwTokenMgrError("Found multiple 'namespace' declarations.");
    }
    if (seenAlias) {
      throwTokenMgrError(
          "The 'namespace' declaration must appear before any 'alias' declarations.");
    }
    if (seenTemplate) {
      throwTokenMgrError("The 'namespace' declaration must appear before any templates.");
    }
    seenNamespace = true;
         break;
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("Tag 'namespace' not at start of line.");
         break;
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("End of tag 'namespace' not at end of line.");
         break;
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("Invalid 'namespace' tag", matchedToken);
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    if (! seenNamespace) {
      throwTokenMgrError("The 'alias' declarations must appear after the 'namespace' declaration.");
    }
    if (seenTemplate) {
      throwTokenMgrError("The 'alias' declarations must appear before any templates.");
    }
    seenAlias = true;
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("The form of the 'alias' tag with \u005c"as ...\u005c" is currently disabled.");
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("Tag 'alias' not at start of line.");
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("End of tag 'alias' not at end of line.");
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("Invalid 'alias' tag", matchedToken);
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("SoyDoc not at start of line", matchedToken);
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("End of SoyDoc not at end of line", matchedToken);
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    seenTemplate = true;
    if (image.substring(0, 9).equals("{template")) {
      currTemplateCmdName = "template";
    } else if (image.substring(0, 12).equals("{deltemplate")) {
      currTemplateCmdName = "deltemplate";
    } else {
      throw new AssertionError();
    }
    // Remove the extra whitespace that we matched after the tag.
    int rbIndex = image.lastIndexOf("}");
    matchedToken.image = image.substring(0, rbIndex + 1);
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    int lbIndex = image.lastIndexOf("{");
    switch (image.length() - lbIndex) {
      case 11:
        if (! currTemplateCmdName.equals("template")) {
          throwTokenMgrError(
              "Cannot start a template with 'deltemplate' and end it with '/template'.");
        }
        break;
      case 14:
        if (! currTemplateCmdName.equals("deltemplate")) {
          throwTokenMgrError(
              "Cannot start a template with 'template' and end it with '/deltemplate'.");
        }
        break;
      default:
        throw new AssertionError();
    }
    currTemplateCmdName = null;
    // Remove the end-template tag so that the template body ends with the last newline.
    matchedToken.image = image.substring(0, lbIndex);
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("Template tag not at start of line", matchedToken);
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("End of template tag not at end of line", matchedToken);
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("End-template tag not at start of line", matchedToken);
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("End of end-template tag not at end of line", matchedToken);
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("Invalid template tag", matchedToken);
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    throwTokenMgrError("Invalid end-template tag", matchedToken);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
